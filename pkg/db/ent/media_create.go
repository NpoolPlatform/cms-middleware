// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/media"
	"github.com/google/uuid"
)

// MediaCreate is the builder for creating a Media entity.
type MediaCreate struct {
	config
	mutation *MediaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *MediaCreate) SetCreatedAt(u uint32) *MediaCreate {
	mc.mutation.SetCreatedAt(u)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableCreatedAt(u *uint32) *MediaCreate {
	if u != nil {
		mc.SetCreatedAt(*u)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MediaCreate) SetUpdatedAt(u uint32) *MediaCreate {
	mc.mutation.SetUpdatedAt(u)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableUpdatedAt(u *uint32) *MediaCreate {
	if u != nil {
		mc.SetUpdatedAt(*u)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MediaCreate) SetDeletedAt(u uint32) *MediaCreate {
	mc.mutation.SetDeletedAt(u)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MediaCreate) SetNillableDeletedAt(u *uint32) *MediaCreate {
	if u != nil {
		mc.SetDeletedAt(*u)
	}
	return mc
}

// SetEntID sets the "ent_id" field.
func (mc *MediaCreate) SetEntID(u uuid.UUID) *MediaCreate {
	mc.mutation.SetEntID(u)
	return mc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableEntID(u *uuid.UUID) *MediaCreate {
	if u != nil {
		mc.SetEntID(*u)
	}
	return mc
}

// SetAppID sets the "app_id" field.
func (mc *MediaCreate) SetAppID(u uuid.UUID) *MediaCreate {
	mc.mutation.SetAppID(u)
	return mc
}

// SetName sets the "name" field.
func (mc *MediaCreate) SetName(s string) *MediaCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MediaCreate) SetNillableName(s *string) *MediaCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetExt sets the "ext" field.
func (mc *MediaCreate) SetExt(s string) *MediaCreate {
	mc.mutation.SetExt(s)
	return mc
}

// SetNillableExt sets the "ext" field if the given value is not nil.
func (mc *MediaCreate) SetNillableExt(s *string) *MediaCreate {
	if s != nil {
		mc.SetExt(*s)
	}
	return mc
}

// SetMediaURL sets the "media_url" field.
func (mc *MediaCreate) SetMediaURL(s string) *MediaCreate {
	mc.mutation.SetMediaURL(s)
	return mc
}

// SetNillableMediaURL sets the "media_url" field if the given value is not nil.
func (mc *MediaCreate) SetNillableMediaURL(s *string) *MediaCreate {
	if s != nil {
		mc.SetMediaURL(*s)
	}
	return mc
}

// SetCreatedBy sets the "created_by" field.
func (mc *MediaCreate) SetCreatedBy(u uuid.UUID) *MediaCreate {
	mc.mutation.SetCreatedBy(u)
	return mc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mc *MediaCreate) SetNillableCreatedBy(u *uuid.UUID) *MediaCreate {
	if u != nil {
		mc.SetCreatedBy(*u)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MediaCreate) SetID(u uint32) *MediaCreate {
	mc.mutation.SetID(u)
	return mc
}

// Mutation returns the MediaMutation object of the builder.
func (mc *MediaCreate) Mutation() *MediaMutation {
	return mc.mutation
}

// Save creates the Media in the database.
func (mc *MediaCreate) Save(ctx context.Context) (*Media, error) {
	var (
		err  error
		node *Media
	)
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Media)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MediaMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MediaCreate) SaveX(ctx context.Context) *Media {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MediaCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MediaCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MediaCreate) defaults() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if media.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized media.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := media.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if media.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized media.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := media.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		if media.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized media.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := media.DefaultDeletedAt()
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.EntID(); !ok {
		if media.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized media.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := media.DefaultEntID()
		mc.mutation.SetEntID(v)
	}
	if _, ok := mc.mutation.Name(); !ok {
		v := media.DefaultName
		mc.mutation.SetName(v)
	}
	if _, ok := mc.mutation.Ext(); !ok {
		v := media.DefaultExt
		mc.mutation.SetExt(v)
	}
	if _, ok := mc.mutation.MediaURL(); !ok {
		v := media.DefaultMediaURL
		mc.mutation.SetMediaURL(v)
	}
	if _, ok := mc.mutation.CreatedBy(); !ok {
		if media.DefaultCreatedBy == nil {
			return fmt.Errorf("ent: uninitialized media.DefaultCreatedBy (forgotten import ent/runtime?)")
		}
		v := media.DefaultCreatedBy()
		mc.mutation.SetCreatedBy(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MediaCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Media.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Media.updated_at"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Media.deleted_at"`)}
	}
	if _, ok := mc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Media.ent_id"`)}
	}
	if _, ok := mc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Media.app_id"`)}
	}
	return nil
}

func (mc *MediaCreate) sqlSave(ctx context.Context) (*Media, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (mc *MediaCreate) createSpec() (*Media, *sqlgraph.CreateSpec) {
	var (
		_node = &Media{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: media.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: media.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: media.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: media.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: media.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: media.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := mc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: media.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.Ext(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldExt,
		})
		_node.Ext = value
	}
	if value, ok := mc.mutation.MediaURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldMediaURL,
		})
		_node.MediaURL = value
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: media.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Media.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MediaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mc *MediaCreate) OnConflict(opts ...sql.ConflictOption) *MediaUpsertOne {
	mc.conflict = opts
	return &MediaUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mc *MediaCreate) OnConflictColumns(columns ...string) *MediaUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MediaUpsertOne{
		create: mc,
	}
}

type (
	// MediaUpsertOne is the builder for "upsert"-ing
	//  one Media node.
	MediaUpsertOne struct {
		create *MediaCreate
	}

	// MediaUpsert is the "OnConflict" setter.
	MediaUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MediaUpsert) SetCreatedAt(v uint32) *MediaUpsert {
	u.Set(media.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MediaUpsert) UpdateCreatedAt() *MediaUpsert {
	u.SetExcluded(media.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MediaUpsert) AddCreatedAt(v uint32) *MediaUpsert {
	u.Add(media.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MediaUpsert) SetUpdatedAt(v uint32) *MediaUpsert {
	u.Set(media.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MediaUpsert) UpdateUpdatedAt() *MediaUpsert {
	u.SetExcluded(media.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MediaUpsert) AddUpdatedAt(v uint32) *MediaUpsert {
	u.Add(media.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MediaUpsert) SetDeletedAt(v uint32) *MediaUpsert {
	u.Set(media.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MediaUpsert) UpdateDeletedAt() *MediaUpsert {
	u.SetExcluded(media.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MediaUpsert) AddDeletedAt(v uint32) *MediaUpsert {
	u.Add(media.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *MediaUpsert) SetEntID(v uuid.UUID) *MediaUpsert {
	u.Set(media.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *MediaUpsert) UpdateEntID() *MediaUpsert {
	u.SetExcluded(media.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *MediaUpsert) SetAppID(v uuid.UUID) *MediaUpsert {
	u.Set(media.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MediaUpsert) UpdateAppID() *MediaUpsert {
	u.SetExcluded(media.FieldAppID)
	return u
}

// SetName sets the "name" field.
func (u *MediaUpsert) SetName(v string) *MediaUpsert {
	u.Set(media.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MediaUpsert) UpdateName() *MediaUpsert {
	u.SetExcluded(media.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *MediaUpsert) ClearName() *MediaUpsert {
	u.SetNull(media.FieldName)
	return u
}

// SetExt sets the "ext" field.
func (u *MediaUpsert) SetExt(v string) *MediaUpsert {
	u.Set(media.FieldExt, v)
	return u
}

// UpdateExt sets the "ext" field to the value that was provided on create.
func (u *MediaUpsert) UpdateExt() *MediaUpsert {
	u.SetExcluded(media.FieldExt)
	return u
}

// ClearExt clears the value of the "ext" field.
func (u *MediaUpsert) ClearExt() *MediaUpsert {
	u.SetNull(media.FieldExt)
	return u
}

// SetMediaURL sets the "media_url" field.
func (u *MediaUpsert) SetMediaURL(v string) *MediaUpsert {
	u.Set(media.FieldMediaURL, v)
	return u
}

// UpdateMediaURL sets the "media_url" field to the value that was provided on create.
func (u *MediaUpsert) UpdateMediaURL() *MediaUpsert {
	u.SetExcluded(media.FieldMediaURL)
	return u
}

// ClearMediaURL clears the value of the "media_url" field.
func (u *MediaUpsert) ClearMediaURL() *MediaUpsert {
	u.SetNull(media.FieldMediaURL)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MediaUpsert) SetCreatedBy(v uuid.UUID) *MediaUpsert {
	u.Set(media.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MediaUpsert) UpdateCreatedBy() *MediaUpsert {
	u.SetExcluded(media.FieldCreatedBy)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *MediaUpsert) ClearCreatedBy() *MediaUpsert {
	u.SetNull(media.FieldCreatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(media.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MediaUpsertOne) UpdateNewValues() *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(media.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Media.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MediaUpsertOne) Ignore() *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MediaUpsertOne) DoNothing() *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MediaCreate.OnConflict
// documentation for more info.
func (u *MediaUpsertOne) Update(set func(*MediaUpsert)) *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MediaUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MediaUpsertOne) SetCreatedAt(v uint32) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MediaUpsertOne) AddCreatedAt(v uint32) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateCreatedAt() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MediaUpsertOne) SetUpdatedAt(v uint32) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MediaUpsertOne) AddUpdatedAt(v uint32) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateUpdatedAt() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MediaUpsertOne) SetDeletedAt(v uint32) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MediaUpsertOne) AddDeletedAt(v uint32) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateDeletedAt() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *MediaUpsertOne) SetEntID(v uuid.UUID) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateEntID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *MediaUpsertOne) SetAppID(v uuid.UUID) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateAppID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAppID()
	})
}

// SetName sets the "name" field.
func (u *MediaUpsertOne) SetName(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MediaUpsertOne) ClearName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearName()
	})
}

// SetExt sets the "ext" field.
func (u *MediaUpsertOne) SetExt(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetExt(v)
	})
}

// UpdateExt sets the "ext" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateExt() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateExt()
	})
}

// ClearExt clears the value of the "ext" field.
func (u *MediaUpsertOne) ClearExt() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearExt()
	})
}

// SetMediaURL sets the "media_url" field.
func (u *MediaUpsertOne) SetMediaURL(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetMediaURL(v)
	})
}

// UpdateMediaURL sets the "media_url" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateMediaURL() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateMediaURL()
	})
}

// ClearMediaURL clears the value of the "media_url" field.
func (u *MediaUpsertOne) ClearMediaURL() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearMediaURL()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MediaUpsertOne) SetCreatedBy(v uuid.UUID) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateCreatedBy() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *MediaUpsertOne) ClearCreatedBy() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearCreatedBy()
	})
}

// Exec executes the query.
func (u *MediaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MediaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MediaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MediaUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MediaUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MediaCreateBulk is the builder for creating many Media entities in bulk.
type MediaCreateBulk struct {
	config
	builders []*MediaCreate
	conflict []sql.ConflictOption
}

// Save creates the Media entities in the database.
func (mcb *MediaCreateBulk) Save(ctx context.Context) ([]*Media, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Media, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MediaCreateBulk) SaveX(ctx context.Context) []*Media {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MediaCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MediaCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Media.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MediaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mcb *MediaCreateBulk) OnConflict(opts ...sql.ConflictOption) *MediaUpsertBulk {
	mcb.conflict = opts
	return &MediaUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mcb *MediaCreateBulk) OnConflictColumns(columns ...string) *MediaUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MediaUpsertBulk{
		create: mcb,
	}
}

// MediaUpsertBulk is the builder for "upsert"-ing
// a bulk of Media nodes.
type MediaUpsertBulk struct {
	create *MediaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(media.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MediaUpsertBulk) UpdateNewValues() *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(media.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MediaUpsertBulk) Ignore() *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MediaUpsertBulk) DoNothing() *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MediaCreateBulk.OnConflict
// documentation for more info.
func (u *MediaUpsertBulk) Update(set func(*MediaUpsert)) *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MediaUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MediaUpsertBulk) SetCreatedAt(v uint32) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MediaUpsertBulk) AddCreatedAt(v uint32) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateCreatedAt() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MediaUpsertBulk) SetUpdatedAt(v uint32) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MediaUpsertBulk) AddUpdatedAt(v uint32) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateUpdatedAt() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MediaUpsertBulk) SetDeletedAt(v uint32) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MediaUpsertBulk) AddDeletedAt(v uint32) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateDeletedAt() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *MediaUpsertBulk) SetEntID(v uuid.UUID) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateEntID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *MediaUpsertBulk) SetAppID(v uuid.UUID) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateAppID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAppID()
	})
}

// SetName sets the "name" field.
func (u *MediaUpsertBulk) SetName(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MediaUpsertBulk) ClearName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearName()
	})
}

// SetExt sets the "ext" field.
func (u *MediaUpsertBulk) SetExt(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetExt(v)
	})
}

// UpdateExt sets the "ext" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateExt() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateExt()
	})
}

// ClearExt clears the value of the "ext" field.
func (u *MediaUpsertBulk) ClearExt() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearExt()
	})
}

// SetMediaURL sets the "media_url" field.
func (u *MediaUpsertBulk) SetMediaURL(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetMediaURL(v)
	})
}

// UpdateMediaURL sets the "media_url" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateMediaURL() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateMediaURL()
	})
}

// ClearMediaURL clears the value of the "media_url" field.
func (u *MediaUpsertBulk) ClearMediaURL() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearMediaURL()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MediaUpsertBulk) SetCreatedBy(v uuid.UUID) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateCreatedBy() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *MediaUpsertBulk) ClearCreatedBy() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearCreatedBy()
	})
}

// Exec executes the query.
func (u *MediaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MediaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MediaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MediaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
