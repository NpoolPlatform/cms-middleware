// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/article"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ArticleUpdate is the builder for updating Article entities.
type ArticleUpdate struct {
	config
	hooks     []Hook
	mutation  *ArticleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ArticleUpdate builder.
func (au *ArticleUpdate) Where(ps ...predicate.Article) *ArticleUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *ArticleUpdate) SetCreatedAt(u uint32) *ArticleUpdate {
	au.mutation.ResetCreatedAt()
	au.mutation.SetCreatedAt(u)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableCreatedAt(u *uint32) *ArticleUpdate {
	if u != nil {
		au.SetCreatedAt(*u)
	}
	return au
}

// AddCreatedAt adds u to the "created_at" field.
func (au *ArticleUpdate) AddCreatedAt(u int32) *ArticleUpdate {
	au.mutation.AddCreatedAt(u)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ArticleUpdate) SetUpdatedAt(u uint32) *ArticleUpdate {
	au.mutation.ResetUpdatedAt()
	au.mutation.SetUpdatedAt(u)
	return au
}

// AddUpdatedAt adds u to the "updated_at" field.
func (au *ArticleUpdate) AddUpdatedAt(u int32) *ArticleUpdate {
	au.mutation.AddUpdatedAt(u)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *ArticleUpdate) SetDeletedAt(u uint32) *ArticleUpdate {
	au.mutation.ResetDeletedAt()
	au.mutation.SetDeletedAt(u)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableDeletedAt(u *uint32) *ArticleUpdate {
	if u != nil {
		au.SetDeletedAt(*u)
	}
	return au
}

// AddDeletedAt adds u to the "deleted_at" field.
func (au *ArticleUpdate) AddDeletedAt(u int32) *ArticleUpdate {
	au.mutation.AddDeletedAt(u)
	return au
}

// SetEntID sets the "ent_id" field.
func (au *ArticleUpdate) SetEntID(u uuid.UUID) *ArticleUpdate {
	au.mutation.SetEntID(u)
	return au
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableEntID(u *uuid.UUID) *ArticleUpdate {
	if u != nil {
		au.SetEntID(*u)
	}
	return au
}

// SetAppID sets the "app_id" field.
func (au *ArticleUpdate) SetAppID(u uuid.UUID) *ArticleUpdate {
	au.mutation.SetAppID(u)
	return au
}

// SetCategoryID sets the "category_id" field.
func (au *ArticleUpdate) SetCategoryID(u uuid.UUID) *ArticleUpdate {
	au.mutation.SetCategoryID(u)
	return au
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableCategoryID(u *uuid.UUID) *ArticleUpdate {
	if u != nil {
		au.SetCategoryID(*u)
	}
	return au
}

// ClearCategoryID clears the value of the "category_id" field.
func (au *ArticleUpdate) ClearCategoryID() *ArticleUpdate {
	au.mutation.ClearCategoryID()
	return au
}

// SetAuthorID sets the "author_id" field.
func (au *ArticleUpdate) SetAuthorID(u uuid.UUID) *ArticleUpdate {
	au.mutation.SetAuthorID(u)
	return au
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableAuthorID(u *uuid.UUID) *ArticleUpdate {
	if u != nil {
		au.SetAuthorID(*u)
	}
	return au
}

// ClearAuthorID clears the value of the "author_id" field.
func (au *ArticleUpdate) ClearAuthorID() *ArticleUpdate {
	au.mutation.ClearAuthorID()
	return au
}

// SetArticleKey sets the "article_key" field.
func (au *ArticleUpdate) SetArticleKey(u uuid.UUID) *ArticleUpdate {
	au.mutation.SetArticleKey(u)
	return au
}

// SetNillableArticleKey sets the "article_key" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableArticleKey(u *uuid.UUID) *ArticleUpdate {
	if u != nil {
		au.SetArticleKey(*u)
	}
	return au
}

// ClearArticleKey clears the value of the "article_key" field.
func (au *ArticleUpdate) ClearArticleKey() *ArticleUpdate {
	au.mutation.ClearArticleKey()
	return au
}

// SetTitle sets the "title" field.
func (au *ArticleUpdate) SetTitle(s string) *ArticleUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableTitle(s *string) *ArticleUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// ClearTitle clears the value of the "title" field.
func (au *ArticleUpdate) ClearTitle() *ArticleUpdate {
	au.mutation.ClearTitle()
	return au
}

// SetSubtitle sets the "subtitle" field.
func (au *ArticleUpdate) SetSubtitle(s string) *ArticleUpdate {
	au.mutation.SetSubtitle(s)
	return au
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableSubtitle(s *string) *ArticleUpdate {
	if s != nil {
		au.SetSubtitle(*s)
	}
	return au
}

// ClearSubtitle clears the value of the "subtitle" field.
func (au *ArticleUpdate) ClearSubtitle() *ArticleUpdate {
	au.mutation.ClearSubtitle()
	return au
}

// SetDigest sets the "digest" field.
func (au *ArticleUpdate) SetDigest(s string) *ArticleUpdate {
	au.mutation.SetDigest(s)
	return au
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableDigest(s *string) *ArticleUpdate {
	if s != nil {
		au.SetDigest(*s)
	}
	return au
}

// ClearDigest clears the value of the "digest" field.
func (au *ArticleUpdate) ClearDigest() *ArticleUpdate {
	au.mutation.ClearDigest()
	return au
}

// SetStatus sets the "status" field.
func (au *ArticleUpdate) SetStatus(s string) *ArticleUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableStatus(s *string) *ArticleUpdate {
	if s != nil {
		au.SetStatus(*s)
	}
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *ArticleUpdate) ClearStatus() *ArticleUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetHost sets the "host" field.
func (au *ArticleUpdate) SetHost(s string) *ArticleUpdate {
	au.mutation.SetHost(s)
	return au
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableHost(s *string) *ArticleUpdate {
	if s != nil {
		au.SetHost(*s)
	}
	return au
}

// ClearHost clears the value of the "host" field.
func (au *ArticleUpdate) ClearHost() *ArticleUpdate {
	au.mutation.ClearHost()
	return au
}

// SetVersion sets the "version" field.
func (au *ArticleUpdate) SetVersion(u uint32) *ArticleUpdate {
	au.mutation.ResetVersion()
	au.mutation.SetVersion(u)
	return au
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableVersion(u *uint32) *ArticleUpdate {
	if u != nil {
		au.SetVersion(*u)
	}
	return au
}

// AddVersion adds u to the "version" field.
func (au *ArticleUpdate) AddVersion(u int32) *ArticleUpdate {
	au.mutation.AddVersion(u)
	return au
}

// ClearVersion clears the value of the "version" field.
func (au *ArticleUpdate) ClearVersion() *ArticleUpdate {
	au.mutation.ClearVersion()
	return au
}

// SetContentURL sets the "content_url" field.
func (au *ArticleUpdate) SetContentURL(s string) *ArticleUpdate {
	au.mutation.SetContentURL(s)
	return au
}

// SetNillableContentURL sets the "content_url" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableContentURL(s *string) *ArticleUpdate {
	if s != nil {
		au.SetContentURL(*s)
	}
	return au
}

// ClearContentURL clears the value of the "content_url" field.
func (au *ArticleUpdate) ClearContentURL() *ArticleUpdate {
	au.mutation.ClearContentURL()
	return au
}

// SetLatest sets the "latest" field.
func (au *ArticleUpdate) SetLatest(b bool) *ArticleUpdate {
	au.mutation.SetLatest(b)
	return au
}

// SetNillableLatest sets the "latest" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableLatest(b *bool) *ArticleUpdate {
	if b != nil {
		au.SetLatest(*b)
	}
	return au
}

// ClearLatest clears the value of the "latest" field.
func (au *ArticleUpdate) ClearLatest() *ArticleUpdate {
	au.mutation.ClearLatest()
	return au
}

// SetPublishedAt sets the "published_at" field.
func (au *ArticleUpdate) SetPublishedAt(u uint32) *ArticleUpdate {
	au.mutation.ResetPublishedAt()
	au.mutation.SetPublishedAt(u)
	return au
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (au *ArticleUpdate) SetNillablePublishedAt(u *uint32) *ArticleUpdate {
	if u != nil {
		au.SetPublishedAt(*u)
	}
	return au
}

// AddPublishedAt adds u to the "published_at" field.
func (au *ArticleUpdate) AddPublishedAt(u int32) *ArticleUpdate {
	au.mutation.AddPublishedAt(u)
	return au
}

// ClearPublishedAt clears the value of the "published_at" field.
func (au *ArticleUpdate) ClearPublishedAt() *ArticleUpdate {
	au.mutation.ClearPublishedAt()
	return au
}

// Mutation returns the ArticleMutation object of the builder.
func (au *ArticleUpdate) Mutation() *ArticleMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArticleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := au.defaults(); err != nil {
		return 0, err
	}
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArticleUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArticleUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ArticleUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if article.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized article.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := article.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *ArticleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArticleUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *ArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   article.Table,
			Columns: article.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: article.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldDeletedAt,
		})
	}
	if value, ok := au.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldEntID,
		})
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldAppID,
		})
	}
	if value, ok := au.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldCategoryID,
		})
	}
	if au.mutation.CategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: article.FieldCategoryID,
		})
	}
	if value, ok := au.mutation.AuthorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldAuthorID,
		})
	}
	if au.mutation.AuthorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: article.FieldAuthorID,
		})
	}
	if value, ok := au.mutation.ArticleKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldArticleKey,
		})
	}
	if au.mutation.ArticleKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: article.FieldArticleKey,
		})
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldTitle,
		})
	}
	if au.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldTitle,
		})
	}
	if value, ok := au.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldSubtitle,
		})
	}
	if au.mutation.SubtitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldSubtitle,
		})
	}
	if value, ok := au.mutation.Digest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldDigest,
		})
	}
	if au.mutation.DigestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldDigest,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldStatus,
		})
	}
	if au.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldStatus,
		})
	}
	if value, ok := au.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldHost,
		})
	}
	if au.mutation.HostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldHost,
		})
	}
	if value, ok := au.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldVersion,
		})
	}
	if value, ok := au.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldVersion,
		})
	}
	if au.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: article.FieldVersion,
		})
	}
	if value, ok := au.mutation.ContentURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldContentURL,
		})
	}
	if au.mutation.ContentURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldContentURL,
		})
	}
	if value, ok := au.mutation.Latest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: article.FieldLatest,
		})
	}
	if au.mutation.LatestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: article.FieldLatest,
		})
	}
	if value, ok := au.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldPublishedAt,
		})
	}
	if value, ok := au.mutation.AddedPublishedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldPublishedAt,
		})
	}
	if au.mutation.PublishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: article.FieldPublishedAt,
		})
	}
	_spec.Modifiers = au.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ArticleUpdateOne is the builder for updating a single Article entity.
type ArticleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ArticleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (auo *ArticleUpdateOne) SetCreatedAt(u uint32) *ArticleUpdateOne {
	auo.mutation.ResetCreatedAt()
	auo.mutation.SetCreatedAt(u)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableCreatedAt(u *uint32) *ArticleUpdateOne {
	if u != nil {
		auo.SetCreatedAt(*u)
	}
	return auo
}

// AddCreatedAt adds u to the "created_at" field.
func (auo *ArticleUpdateOne) AddCreatedAt(u int32) *ArticleUpdateOne {
	auo.mutation.AddCreatedAt(u)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ArticleUpdateOne) SetUpdatedAt(u uint32) *ArticleUpdateOne {
	auo.mutation.ResetUpdatedAt()
	auo.mutation.SetUpdatedAt(u)
	return auo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (auo *ArticleUpdateOne) AddUpdatedAt(u int32) *ArticleUpdateOne {
	auo.mutation.AddUpdatedAt(u)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *ArticleUpdateOne) SetDeletedAt(u uint32) *ArticleUpdateOne {
	auo.mutation.ResetDeletedAt()
	auo.mutation.SetDeletedAt(u)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableDeletedAt(u *uint32) *ArticleUpdateOne {
	if u != nil {
		auo.SetDeletedAt(*u)
	}
	return auo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (auo *ArticleUpdateOne) AddDeletedAt(u int32) *ArticleUpdateOne {
	auo.mutation.AddDeletedAt(u)
	return auo
}

// SetEntID sets the "ent_id" field.
func (auo *ArticleUpdateOne) SetEntID(u uuid.UUID) *ArticleUpdateOne {
	auo.mutation.SetEntID(u)
	return auo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableEntID(u *uuid.UUID) *ArticleUpdateOne {
	if u != nil {
		auo.SetEntID(*u)
	}
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *ArticleUpdateOne) SetAppID(u uuid.UUID) *ArticleUpdateOne {
	auo.mutation.SetAppID(u)
	return auo
}

// SetCategoryID sets the "category_id" field.
func (auo *ArticleUpdateOne) SetCategoryID(u uuid.UUID) *ArticleUpdateOne {
	auo.mutation.SetCategoryID(u)
	return auo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableCategoryID(u *uuid.UUID) *ArticleUpdateOne {
	if u != nil {
		auo.SetCategoryID(*u)
	}
	return auo
}

// ClearCategoryID clears the value of the "category_id" field.
func (auo *ArticleUpdateOne) ClearCategoryID() *ArticleUpdateOne {
	auo.mutation.ClearCategoryID()
	return auo
}

// SetAuthorID sets the "author_id" field.
func (auo *ArticleUpdateOne) SetAuthorID(u uuid.UUID) *ArticleUpdateOne {
	auo.mutation.SetAuthorID(u)
	return auo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableAuthorID(u *uuid.UUID) *ArticleUpdateOne {
	if u != nil {
		auo.SetAuthorID(*u)
	}
	return auo
}

// ClearAuthorID clears the value of the "author_id" field.
func (auo *ArticleUpdateOne) ClearAuthorID() *ArticleUpdateOne {
	auo.mutation.ClearAuthorID()
	return auo
}

// SetArticleKey sets the "article_key" field.
func (auo *ArticleUpdateOne) SetArticleKey(u uuid.UUID) *ArticleUpdateOne {
	auo.mutation.SetArticleKey(u)
	return auo
}

// SetNillableArticleKey sets the "article_key" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableArticleKey(u *uuid.UUID) *ArticleUpdateOne {
	if u != nil {
		auo.SetArticleKey(*u)
	}
	return auo
}

// ClearArticleKey clears the value of the "article_key" field.
func (auo *ArticleUpdateOne) ClearArticleKey() *ArticleUpdateOne {
	auo.mutation.ClearArticleKey()
	return auo
}

// SetTitle sets the "title" field.
func (auo *ArticleUpdateOne) SetTitle(s string) *ArticleUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableTitle(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// ClearTitle clears the value of the "title" field.
func (auo *ArticleUpdateOne) ClearTitle() *ArticleUpdateOne {
	auo.mutation.ClearTitle()
	return auo
}

// SetSubtitle sets the "subtitle" field.
func (auo *ArticleUpdateOne) SetSubtitle(s string) *ArticleUpdateOne {
	auo.mutation.SetSubtitle(s)
	return auo
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableSubtitle(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetSubtitle(*s)
	}
	return auo
}

// ClearSubtitle clears the value of the "subtitle" field.
func (auo *ArticleUpdateOne) ClearSubtitle() *ArticleUpdateOne {
	auo.mutation.ClearSubtitle()
	return auo
}

// SetDigest sets the "digest" field.
func (auo *ArticleUpdateOne) SetDigest(s string) *ArticleUpdateOne {
	auo.mutation.SetDigest(s)
	return auo
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableDigest(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetDigest(*s)
	}
	return auo
}

// ClearDigest clears the value of the "digest" field.
func (auo *ArticleUpdateOne) ClearDigest() *ArticleUpdateOne {
	auo.mutation.ClearDigest()
	return auo
}

// SetStatus sets the "status" field.
func (auo *ArticleUpdateOne) SetStatus(s string) *ArticleUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableStatus(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetStatus(*s)
	}
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *ArticleUpdateOne) ClearStatus() *ArticleUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetHost sets the "host" field.
func (auo *ArticleUpdateOne) SetHost(s string) *ArticleUpdateOne {
	auo.mutation.SetHost(s)
	return auo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableHost(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetHost(*s)
	}
	return auo
}

// ClearHost clears the value of the "host" field.
func (auo *ArticleUpdateOne) ClearHost() *ArticleUpdateOne {
	auo.mutation.ClearHost()
	return auo
}

// SetVersion sets the "version" field.
func (auo *ArticleUpdateOne) SetVersion(u uint32) *ArticleUpdateOne {
	auo.mutation.ResetVersion()
	auo.mutation.SetVersion(u)
	return auo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableVersion(u *uint32) *ArticleUpdateOne {
	if u != nil {
		auo.SetVersion(*u)
	}
	return auo
}

// AddVersion adds u to the "version" field.
func (auo *ArticleUpdateOne) AddVersion(u int32) *ArticleUpdateOne {
	auo.mutation.AddVersion(u)
	return auo
}

// ClearVersion clears the value of the "version" field.
func (auo *ArticleUpdateOne) ClearVersion() *ArticleUpdateOne {
	auo.mutation.ClearVersion()
	return auo
}

// SetContentURL sets the "content_url" field.
func (auo *ArticleUpdateOne) SetContentURL(s string) *ArticleUpdateOne {
	auo.mutation.SetContentURL(s)
	return auo
}

// SetNillableContentURL sets the "content_url" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableContentURL(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetContentURL(*s)
	}
	return auo
}

// ClearContentURL clears the value of the "content_url" field.
func (auo *ArticleUpdateOne) ClearContentURL() *ArticleUpdateOne {
	auo.mutation.ClearContentURL()
	return auo
}

// SetLatest sets the "latest" field.
func (auo *ArticleUpdateOne) SetLatest(b bool) *ArticleUpdateOne {
	auo.mutation.SetLatest(b)
	return auo
}

// SetNillableLatest sets the "latest" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableLatest(b *bool) *ArticleUpdateOne {
	if b != nil {
		auo.SetLatest(*b)
	}
	return auo
}

// ClearLatest clears the value of the "latest" field.
func (auo *ArticleUpdateOne) ClearLatest() *ArticleUpdateOne {
	auo.mutation.ClearLatest()
	return auo
}

// SetPublishedAt sets the "published_at" field.
func (auo *ArticleUpdateOne) SetPublishedAt(u uint32) *ArticleUpdateOne {
	auo.mutation.ResetPublishedAt()
	auo.mutation.SetPublishedAt(u)
	return auo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillablePublishedAt(u *uint32) *ArticleUpdateOne {
	if u != nil {
		auo.SetPublishedAt(*u)
	}
	return auo
}

// AddPublishedAt adds u to the "published_at" field.
func (auo *ArticleUpdateOne) AddPublishedAt(u int32) *ArticleUpdateOne {
	auo.mutation.AddPublishedAt(u)
	return auo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (auo *ArticleUpdateOne) ClearPublishedAt() *ArticleUpdateOne {
	auo.mutation.ClearPublishedAt()
	return auo
}

// Mutation returns the ArticleMutation object of the builder.
func (auo *ArticleUpdateOne) Mutation() *ArticleMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArticleUpdateOne) Select(field string, fields ...string) *ArticleUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Article entity.
func (auo *ArticleUpdateOne) Save(ctx context.Context) (*Article, error) {
	var (
		err  error
		node *Article
	)
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Article)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArticleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArticleUpdateOne) SaveX(ctx context.Context) *Article {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArticleUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ArticleUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if article.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized article.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := article.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *ArticleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArticleUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *ArticleUpdateOne) sqlSave(ctx context.Context) (_node *Article, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   article.Table,
			Columns: article.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: article.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Article.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, article.FieldID)
		for _, f := range fields {
			if !article.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != article.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldDeletedAt,
		})
	}
	if value, ok := auo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldEntID,
		})
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldAppID,
		})
	}
	if value, ok := auo.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldCategoryID,
		})
	}
	if auo.mutation.CategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: article.FieldCategoryID,
		})
	}
	if value, ok := auo.mutation.AuthorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldAuthorID,
		})
	}
	if auo.mutation.AuthorIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: article.FieldAuthorID,
		})
	}
	if value, ok := auo.mutation.ArticleKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldArticleKey,
		})
	}
	if auo.mutation.ArticleKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: article.FieldArticleKey,
		})
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldTitle,
		})
	}
	if auo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldTitle,
		})
	}
	if value, ok := auo.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldSubtitle,
		})
	}
	if auo.mutation.SubtitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldSubtitle,
		})
	}
	if value, ok := auo.mutation.Digest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldDigest,
		})
	}
	if auo.mutation.DigestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldDigest,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldStatus,
		})
	}
	if auo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldStatus,
		})
	}
	if value, ok := auo.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldHost,
		})
	}
	if auo.mutation.HostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldHost,
		})
	}
	if value, ok := auo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldVersion,
		})
	}
	if value, ok := auo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldVersion,
		})
	}
	if auo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: article.FieldVersion,
		})
	}
	if value, ok := auo.mutation.ContentURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldContentURL,
		})
	}
	if auo.mutation.ContentURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: article.FieldContentURL,
		})
	}
	if value, ok := auo.mutation.Latest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: article.FieldLatest,
		})
	}
	if auo.mutation.LatestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: article.FieldLatest,
		})
	}
	if value, ok := auo.mutation.PublishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldPublishedAt,
		})
	}
	if value, ok := auo.mutation.AddedPublishedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldPublishedAt,
		})
	}
	if auo.mutation.PublishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: article.FieldPublishedAt,
		})
	}
	_spec.Modifiers = auo.modifiers
	_node = &Article{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
