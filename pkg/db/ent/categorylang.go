// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/categorylang"
	"github.com/google/uuid"
)

// CategoryLang is the model entity for the CategoryLang schema.
type CategoryLang struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// LangID holds the value of the "lang_id" field.
	LangID uuid.UUID `json:"lang_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// Display holds the value of the "display" field.
	Display string `json:"display,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CategoryLang) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case categorylang.FieldID, categorylang.FieldCreatedAt, categorylang.FieldUpdatedAt, categorylang.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case categorylang.FieldDisplay:
			values[i] = new(sql.NullString)
		case categorylang.FieldEntID, categorylang.FieldAppID, categorylang.FieldLangID, categorylang.FieldCategoryID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CategoryLang", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CategoryLang fields.
func (cl *CategoryLang) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categorylang.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = uint32(value.Int64)
		case categorylang.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = uint32(value.Int64)
			}
		case categorylang.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cl.UpdatedAt = uint32(value.Int64)
			}
		case categorylang.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cl.DeletedAt = uint32(value.Int64)
			}
		case categorylang.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				cl.EntID = *value
			}
		case categorylang.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				cl.AppID = *value
			}
		case categorylang.FieldLangID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lang_id", values[i])
			} else if value != nil {
				cl.LangID = *value
			}
		case categorylang.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				cl.CategoryID = *value
			}
		case categorylang.FieldDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				cl.Display = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CategoryLang.
// Note that you need to call CategoryLang.Unwrap() before calling this method if this CategoryLang
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CategoryLang) Update() *CategoryLangUpdateOne {
	return (&CategoryLangClient{config: cl.config}).UpdateOne(cl)
}

// Unwrap unwraps the CategoryLang entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CategoryLang) Unwrap() *CategoryLang {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CategoryLang is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CategoryLang) String() string {
	var builder strings.Builder
	builder.WriteString("CategoryLang(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", cl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", cl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", cl.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.AppID))
	builder.WriteString(", ")
	builder.WriteString("lang_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.LangID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("display=")
	builder.WriteString(cl.Display)
	builder.WriteByte(')')
	return builder.String()
}

// CategoryLangs is a parsable slice of CategoryLang.
type CategoryLangs []*CategoryLang

func (cl CategoryLangs) config(cfg config) {
	for _i := range cl {
		cl[_i].config = cfg
	}
}
