// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/categorylang"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// CategoryLangUpdate is the builder for updating CategoryLang entities.
type CategoryLangUpdate struct {
	config
	hooks     []Hook
	mutation  *CategoryLangMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CategoryLangUpdate builder.
func (clu *CategoryLangUpdate) Where(ps ...predicate.CategoryLang) *CategoryLangUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetCreatedAt sets the "created_at" field.
func (clu *CategoryLangUpdate) SetCreatedAt(u uint32) *CategoryLangUpdate {
	clu.mutation.ResetCreatedAt()
	clu.mutation.SetCreatedAt(u)
	return clu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clu *CategoryLangUpdate) SetNillableCreatedAt(u *uint32) *CategoryLangUpdate {
	if u != nil {
		clu.SetCreatedAt(*u)
	}
	return clu
}

// AddCreatedAt adds u to the "created_at" field.
func (clu *CategoryLangUpdate) AddCreatedAt(u int32) *CategoryLangUpdate {
	clu.mutation.AddCreatedAt(u)
	return clu
}

// SetUpdatedAt sets the "updated_at" field.
func (clu *CategoryLangUpdate) SetUpdatedAt(u uint32) *CategoryLangUpdate {
	clu.mutation.ResetUpdatedAt()
	clu.mutation.SetUpdatedAt(u)
	return clu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (clu *CategoryLangUpdate) AddUpdatedAt(u int32) *CategoryLangUpdate {
	clu.mutation.AddUpdatedAt(u)
	return clu
}

// SetDeletedAt sets the "deleted_at" field.
func (clu *CategoryLangUpdate) SetDeletedAt(u uint32) *CategoryLangUpdate {
	clu.mutation.ResetDeletedAt()
	clu.mutation.SetDeletedAt(u)
	return clu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clu *CategoryLangUpdate) SetNillableDeletedAt(u *uint32) *CategoryLangUpdate {
	if u != nil {
		clu.SetDeletedAt(*u)
	}
	return clu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (clu *CategoryLangUpdate) AddDeletedAt(u int32) *CategoryLangUpdate {
	clu.mutation.AddDeletedAt(u)
	return clu
}

// SetEntID sets the "ent_id" field.
func (clu *CategoryLangUpdate) SetEntID(u uuid.UUID) *CategoryLangUpdate {
	clu.mutation.SetEntID(u)
	return clu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (clu *CategoryLangUpdate) SetNillableEntID(u *uuid.UUID) *CategoryLangUpdate {
	if u != nil {
		clu.SetEntID(*u)
	}
	return clu
}

// SetAppID sets the "app_id" field.
func (clu *CategoryLangUpdate) SetAppID(u uuid.UUID) *CategoryLangUpdate {
	clu.mutation.SetAppID(u)
	return clu
}

// SetLangID sets the "lang_id" field.
func (clu *CategoryLangUpdate) SetLangID(u uuid.UUID) *CategoryLangUpdate {
	clu.mutation.SetLangID(u)
	return clu
}

// SetNillableLangID sets the "lang_id" field if the given value is not nil.
func (clu *CategoryLangUpdate) SetNillableLangID(u *uuid.UUID) *CategoryLangUpdate {
	if u != nil {
		clu.SetLangID(*u)
	}
	return clu
}

// ClearLangID clears the value of the "lang_id" field.
func (clu *CategoryLangUpdate) ClearLangID() *CategoryLangUpdate {
	clu.mutation.ClearLangID()
	return clu
}

// SetCategoryID sets the "category_id" field.
func (clu *CategoryLangUpdate) SetCategoryID(u uuid.UUID) *CategoryLangUpdate {
	clu.mutation.SetCategoryID(u)
	return clu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (clu *CategoryLangUpdate) SetNillableCategoryID(u *uuid.UUID) *CategoryLangUpdate {
	if u != nil {
		clu.SetCategoryID(*u)
	}
	return clu
}

// ClearCategoryID clears the value of the "category_id" field.
func (clu *CategoryLangUpdate) ClearCategoryID() *CategoryLangUpdate {
	clu.mutation.ClearCategoryID()
	return clu
}

// SetDisplay sets the "display" field.
func (clu *CategoryLangUpdate) SetDisplay(s string) *CategoryLangUpdate {
	clu.mutation.SetDisplay(s)
	return clu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (clu *CategoryLangUpdate) SetNillableDisplay(s *string) *CategoryLangUpdate {
	if s != nil {
		clu.SetDisplay(*s)
	}
	return clu
}

// ClearDisplay clears the value of the "display" field.
func (clu *CategoryLangUpdate) ClearDisplay() *CategoryLangUpdate {
	clu.mutation.ClearDisplay()
	return clu
}

// Mutation returns the CategoryLangMutation object of the builder.
func (clu *CategoryLangUpdate) Mutation() *CategoryLangMutation {
	return clu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CategoryLangUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := clu.defaults(); err != nil {
		return 0, err
	}
	if len(clu.hooks) == 0 {
		affected, err = clu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CategoryLangMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			clu.mutation = mutation
			affected, err = clu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(clu.hooks) - 1; i >= 0; i-- {
			if clu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = clu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, clu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CategoryLangUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CategoryLangUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CategoryLangUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clu *CategoryLangUpdate) defaults() error {
	if _, ok := clu.mutation.UpdatedAt(); !ok {
		if categorylang.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized categorylang.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := categorylang.UpdateDefaultUpdatedAt()
		clu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (clu *CategoryLangUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CategoryLangUpdate {
	clu.modifiers = append(clu.modifiers, modifiers...)
	return clu
}

func (clu *CategoryLangUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   categorylang.Table,
			Columns: categorylang.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: categorylang.FieldID,
			},
		},
	}
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldCreatedAt,
		})
	}
	if value, ok := clu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldCreatedAt,
		})
	}
	if value, ok := clu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldUpdatedAt,
		})
	}
	if value, ok := clu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldUpdatedAt,
		})
	}
	if value, ok := clu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldDeletedAt,
		})
	}
	if value, ok := clu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldDeletedAt,
		})
	}
	if value, ok := clu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldEntID,
		})
	}
	if value, ok := clu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldAppID,
		})
	}
	if value, ok := clu.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldLangID,
		})
	}
	if clu.mutation.LangIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: categorylang.FieldLangID,
		})
	}
	if value, ok := clu.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldCategoryID,
		})
	}
	if clu.mutation.CategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: categorylang.FieldCategoryID,
		})
	}
	if value, ok := clu.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: categorylang.FieldDisplay,
		})
	}
	if clu.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: categorylang.FieldDisplay,
		})
	}
	_spec.Modifiers = clu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorylang.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CategoryLangUpdateOne is the builder for updating a single CategoryLang entity.
type CategoryLangUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CategoryLangMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (cluo *CategoryLangUpdateOne) SetCreatedAt(u uint32) *CategoryLangUpdateOne {
	cluo.mutation.ResetCreatedAt()
	cluo.mutation.SetCreatedAt(u)
	return cluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cluo *CategoryLangUpdateOne) SetNillableCreatedAt(u *uint32) *CategoryLangUpdateOne {
	if u != nil {
		cluo.SetCreatedAt(*u)
	}
	return cluo
}

// AddCreatedAt adds u to the "created_at" field.
func (cluo *CategoryLangUpdateOne) AddCreatedAt(u int32) *CategoryLangUpdateOne {
	cluo.mutation.AddCreatedAt(u)
	return cluo
}

// SetUpdatedAt sets the "updated_at" field.
func (cluo *CategoryLangUpdateOne) SetUpdatedAt(u uint32) *CategoryLangUpdateOne {
	cluo.mutation.ResetUpdatedAt()
	cluo.mutation.SetUpdatedAt(u)
	return cluo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (cluo *CategoryLangUpdateOne) AddUpdatedAt(u int32) *CategoryLangUpdateOne {
	cluo.mutation.AddUpdatedAt(u)
	return cluo
}

// SetDeletedAt sets the "deleted_at" field.
func (cluo *CategoryLangUpdateOne) SetDeletedAt(u uint32) *CategoryLangUpdateOne {
	cluo.mutation.ResetDeletedAt()
	cluo.mutation.SetDeletedAt(u)
	return cluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cluo *CategoryLangUpdateOne) SetNillableDeletedAt(u *uint32) *CategoryLangUpdateOne {
	if u != nil {
		cluo.SetDeletedAt(*u)
	}
	return cluo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (cluo *CategoryLangUpdateOne) AddDeletedAt(u int32) *CategoryLangUpdateOne {
	cluo.mutation.AddDeletedAt(u)
	return cluo
}

// SetEntID sets the "ent_id" field.
func (cluo *CategoryLangUpdateOne) SetEntID(u uuid.UUID) *CategoryLangUpdateOne {
	cluo.mutation.SetEntID(u)
	return cluo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (cluo *CategoryLangUpdateOne) SetNillableEntID(u *uuid.UUID) *CategoryLangUpdateOne {
	if u != nil {
		cluo.SetEntID(*u)
	}
	return cluo
}

// SetAppID sets the "app_id" field.
func (cluo *CategoryLangUpdateOne) SetAppID(u uuid.UUID) *CategoryLangUpdateOne {
	cluo.mutation.SetAppID(u)
	return cluo
}

// SetLangID sets the "lang_id" field.
func (cluo *CategoryLangUpdateOne) SetLangID(u uuid.UUID) *CategoryLangUpdateOne {
	cluo.mutation.SetLangID(u)
	return cluo
}

// SetNillableLangID sets the "lang_id" field if the given value is not nil.
func (cluo *CategoryLangUpdateOne) SetNillableLangID(u *uuid.UUID) *CategoryLangUpdateOne {
	if u != nil {
		cluo.SetLangID(*u)
	}
	return cluo
}

// ClearLangID clears the value of the "lang_id" field.
func (cluo *CategoryLangUpdateOne) ClearLangID() *CategoryLangUpdateOne {
	cluo.mutation.ClearLangID()
	return cluo
}

// SetCategoryID sets the "category_id" field.
func (cluo *CategoryLangUpdateOne) SetCategoryID(u uuid.UUID) *CategoryLangUpdateOne {
	cluo.mutation.SetCategoryID(u)
	return cluo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cluo *CategoryLangUpdateOne) SetNillableCategoryID(u *uuid.UUID) *CategoryLangUpdateOne {
	if u != nil {
		cluo.SetCategoryID(*u)
	}
	return cluo
}

// ClearCategoryID clears the value of the "category_id" field.
func (cluo *CategoryLangUpdateOne) ClearCategoryID() *CategoryLangUpdateOne {
	cluo.mutation.ClearCategoryID()
	return cluo
}

// SetDisplay sets the "display" field.
func (cluo *CategoryLangUpdateOne) SetDisplay(s string) *CategoryLangUpdateOne {
	cluo.mutation.SetDisplay(s)
	return cluo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (cluo *CategoryLangUpdateOne) SetNillableDisplay(s *string) *CategoryLangUpdateOne {
	if s != nil {
		cluo.SetDisplay(*s)
	}
	return cluo
}

// ClearDisplay clears the value of the "display" field.
func (cluo *CategoryLangUpdateOne) ClearDisplay() *CategoryLangUpdateOne {
	cluo.mutation.ClearDisplay()
	return cluo
}

// Mutation returns the CategoryLangMutation object of the builder.
func (cluo *CategoryLangUpdateOne) Mutation() *CategoryLangMutation {
	return cluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CategoryLangUpdateOne) Select(field string, fields ...string) *CategoryLangUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CategoryLang entity.
func (cluo *CategoryLangUpdateOne) Save(ctx context.Context) (*CategoryLang, error) {
	var (
		err  error
		node *CategoryLang
	)
	if err := cluo.defaults(); err != nil {
		return nil, err
	}
	if len(cluo.hooks) == 0 {
		node, err = cluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CategoryLangMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cluo.mutation = mutation
			node, err = cluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cluo.hooks) - 1; i >= 0; i-- {
			if cluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CategoryLang)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CategoryLangMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CategoryLangUpdateOne) SaveX(ctx context.Context) *CategoryLang {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CategoryLangUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CategoryLangUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cluo *CategoryLangUpdateOne) defaults() error {
	if _, ok := cluo.mutation.UpdatedAt(); !ok {
		if categorylang.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized categorylang.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := categorylang.UpdateDefaultUpdatedAt()
		cluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cluo *CategoryLangUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CategoryLangUpdateOne {
	cluo.modifiers = append(cluo.modifiers, modifiers...)
	return cluo
}

func (cluo *CategoryLangUpdateOne) sqlSave(ctx context.Context) (_node *CategoryLang, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   categorylang.Table,
			Columns: categorylang.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: categorylang.FieldID,
			},
		},
	}
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CategoryLang.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categorylang.FieldID)
		for _, f := range fields {
			if !categorylang.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != categorylang.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldCreatedAt,
		})
	}
	if value, ok := cluo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldCreatedAt,
		})
	}
	if value, ok := cluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldUpdatedAt,
		})
	}
	if value, ok := cluo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldUpdatedAt,
		})
	}
	if value, ok := cluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldDeletedAt,
		})
	}
	if value, ok := cluo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldDeletedAt,
		})
	}
	if value, ok := cluo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldEntID,
		})
	}
	if value, ok := cluo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldAppID,
		})
	}
	if value, ok := cluo.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldLangID,
		})
	}
	if cluo.mutation.LangIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: categorylang.FieldLangID,
		})
	}
	if value, ok := cluo.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldCategoryID,
		})
	}
	if cluo.mutation.CategoryIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: categorylang.FieldCategoryID,
		})
	}
	if value, ok := cluo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: categorylang.FieldDisplay,
		})
	}
	if cluo.mutation.DisplayCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: categorylang.FieldDisplay,
		})
	}
	_spec.Modifiers = cluo.modifiers
	_node = &CategoryLang{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categorylang.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
