// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/categorylang"
	"github.com/google/uuid"
)

// CategoryLangCreate is the builder for creating a CategoryLang entity.
type CategoryLangCreate struct {
	config
	mutation *CategoryLangMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (clc *CategoryLangCreate) SetCreatedAt(u uint32) *CategoryLangCreate {
	clc.mutation.SetCreatedAt(u)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *CategoryLangCreate) SetNillableCreatedAt(u *uint32) *CategoryLangCreate {
	if u != nil {
		clc.SetCreatedAt(*u)
	}
	return clc
}

// SetUpdatedAt sets the "updated_at" field.
func (clc *CategoryLangCreate) SetUpdatedAt(u uint32) *CategoryLangCreate {
	clc.mutation.SetUpdatedAt(u)
	return clc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clc *CategoryLangCreate) SetNillableUpdatedAt(u *uint32) *CategoryLangCreate {
	if u != nil {
		clc.SetUpdatedAt(*u)
	}
	return clc
}

// SetDeletedAt sets the "deleted_at" field.
func (clc *CategoryLangCreate) SetDeletedAt(u uint32) *CategoryLangCreate {
	clc.mutation.SetDeletedAt(u)
	return clc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clc *CategoryLangCreate) SetNillableDeletedAt(u *uint32) *CategoryLangCreate {
	if u != nil {
		clc.SetDeletedAt(*u)
	}
	return clc
}

// SetEntID sets the "ent_id" field.
func (clc *CategoryLangCreate) SetEntID(u uuid.UUID) *CategoryLangCreate {
	clc.mutation.SetEntID(u)
	return clc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (clc *CategoryLangCreate) SetNillableEntID(u *uuid.UUID) *CategoryLangCreate {
	if u != nil {
		clc.SetEntID(*u)
	}
	return clc
}

// SetAppID sets the "app_id" field.
func (clc *CategoryLangCreate) SetAppID(u uuid.UUID) *CategoryLangCreate {
	clc.mutation.SetAppID(u)
	return clc
}

// SetLangID sets the "lang_id" field.
func (clc *CategoryLangCreate) SetLangID(u uuid.UUID) *CategoryLangCreate {
	clc.mutation.SetLangID(u)
	return clc
}

// SetNillableLangID sets the "lang_id" field if the given value is not nil.
func (clc *CategoryLangCreate) SetNillableLangID(u *uuid.UUID) *CategoryLangCreate {
	if u != nil {
		clc.SetLangID(*u)
	}
	return clc
}

// SetCategoryID sets the "category_id" field.
func (clc *CategoryLangCreate) SetCategoryID(u uuid.UUID) *CategoryLangCreate {
	clc.mutation.SetCategoryID(u)
	return clc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (clc *CategoryLangCreate) SetNillableCategoryID(u *uuid.UUID) *CategoryLangCreate {
	if u != nil {
		clc.SetCategoryID(*u)
	}
	return clc
}

// SetDisplay sets the "display" field.
func (clc *CategoryLangCreate) SetDisplay(s string) *CategoryLangCreate {
	clc.mutation.SetDisplay(s)
	return clc
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (clc *CategoryLangCreate) SetNillableDisplay(s *string) *CategoryLangCreate {
	if s != nil {
		clc.SetDisplay(*s)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *CategoryLangCreate) SetID(u uint32) *CategoryLangCreate {
	clc.mutation.SetID(u)
	return clc
}

// Mutation returns the CategoryLangMutation object of the builder.
func (clc *CategoryLangCreate) Mutation() *CategoryLangMutation {
	return clc.mutation
}

// Save creates the CategoryLang in the database.
func (clc *CategoryLangCreate) Save(ctx context.Context) (*CategoryLang, error) {
	var (
		err  error
		node *CategoryLang
	)
	if err := clc.defaults(); err != nil {
		return nil, err
	}
	if len(clc.hooks) == 0 {
		if err = clc.check(); err != nil {
			return nil, err
		}
		node, err = clc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CategoryLangMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = clc.check(); err != nil {
				return nil, err
			}
			clc.mutation = mutation
			if node, err = clc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(clc.hooks) - 1; i >= 0; i-- {
			if clc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = clc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, clc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CategoryLang)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CategoryLangMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CategoryLangCreate) SaveX(ctx context.Context) *CategoryLang {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CategoryLangCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CategoryLangCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CategoryLangCreate) defaults() error {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		if categorylang.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized categorylang.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := categorylang.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		if categorylang.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized categorylang.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := categorylang.DefaultUpdatedAt()
		clc.mutation.SetUpdatedAt(v)
	}
	if _, ok := clc.mutation.DeletedAt(); !ok {
		if categorylang.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized categorylang.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := categorylang.DefaultDeletedAt()
		clc.mutation.SetDeletedAt(v)
	}
	if _, ok := clc.mutation.EntID(); !ok {
		if categorylang.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized categorylang.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := categorylang.DefaultEntID()
		clc.mutation.SetEntID(v)
	}
	if _, ok := clc.mutation.LangID(); !ok {
		if categorylang.DefaultLangID == nil {
			return fmt.Errorf("ent: uninitialized categorylang.DefaultLangID (forgotten import ent/runtime?)")
		}
		v := categorylang.DefaultLangID()
		clc.mutation.SetLangID(v)
	}
	if _, ok := clc.mutation.CategoryID(); !ok {
		if categorylang.DefaultCategoryID == nil {
			return fmt.Errorf("ent: uninitialized categorylang.DefaultCategoryID (forgotten import ent/runtime?)")
		}
		v := categorylang.DefaultCategoryID()
		clc.mutation.SetCategoryID(v)
	}
	if _, ok := clc.mutation.Display(); !ok {
		v := categorylang.DefaultDisplay
		clc.mutation.SetDisplay(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clc *CategoryLangCreate) check() error {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CategoryLang.created_at"`)}
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CategoryLang.updated_at"`)}
	}
	if _, ok := clc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "CategoryLang.deleted_at"`)}
	}
	if _, ok := clc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "CategoryLang.ent_id"`)}
	}
	if _, ok := clc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "CategoryLang.app_id"`)}
	}
	return nil
}

func (clc *CategoryLangCreate) sqlSave(ctx context.Context) (*CategoryLang, error) {
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (clc *CategoryLangCreate) createSpec() (*CategoryLang, *sqlgraph.CreateSpec) {
	var (
		_node = &CategoryLang{config: clc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: categorylang.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: categorylang.FieldID,
			},
		}
	)
	_spec.OnConflict = clc.conflict
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := clc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := clc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: categorylang.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := clc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := clc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := clc.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := clc.mutation.CategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: categorylang.FieldCategoryID,
		})
		_node.CategoryID = value
	}
	if value, ok := clc.mutation.Display(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: categorylang.FieldDisplay,
		})
		_node.Display = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CategoryLang.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CategoryLangUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (clc *CategoryLangCreate) OnConflict(opts ...sql.ConflictOption) *CategoryLangUpsertOne {
	clc.conflict = opts
	return &CategoryLangUpsertOne{
		create: clc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CategoryLang.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (clc *CategoryLangCreate) OnConflictColumns(columns ...string) *CategoryLangUpsertOne {
	clc.conflict = append(clc.conflict, sql.ConflictColumns(columns...))
	return &CategoryLangUpsertOne{
		create: clc,
	}
}

type (
	// CategoryLangUpsertOne is the builder for "upsert"-ing
	//  one CategoryLang node.
	CategoryLangUpsertOne struct {
		create *CategoryLangCreate
	}

	// CategoryLangUpsert is the "OnConflict" setter.
	CategoryLangUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CategoryLangUpsert) SetCreatedAt(v uint32) *CategoryLangUpsert {
	u.Set(categorylang.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateCreatedAt() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CategoryLangUpsert) AddCreatedAt(v uint32) *CategoryLangUpsert {
	u.Add(categorylang.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CategoryLangUpsert) SetUpdatedAt(v uint32) *CategoryLangUpsert {
	u.Set(categorylang.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateUpdatedAt() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CategoryLangUpsert) AddUpdatedAt(v uint32) *CategoryLangUpsert {
	u.Add(categorylang.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CategoryLangUpsert) SetDeletedAt(v uint32) *CategoryLangUpsert {
	u.Set(categorylang.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateDeletedAt() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CategoryLangUpsert) AddDeletedAt(v uint32) *CategoryLangUpsert {
	u.Add(categorylang.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *CategoryLangUpsert) SetEntID(v uuid.UUID) *CategoryLangUpsert {
	u.Set(categorylang.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateEntID() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *CategoryLangUpsert) SetAppID(v uuid.UUID) *CategoryLangUpsert {
	u.Set(categorylang.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateAppID() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldAppID)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *CategoryLangUpsert) SetLangID(v uuid.UUID) *CategoryLangUpsert {
	u.Set(categorylang.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateLangID() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldLangID)
	return u
}

// ClearLangID clears the value of the "lang_id" field.
func (u *CategoryLangUpsert) ClearLangID() *CategoryLangUpsert {
	u.SetNull(categorylang.FieldLangID)
	return u
}

// SetCategoryID sets the "category_id" field.
func (u *CategoryLangUpsert) SetCategoryID(v uuid.UUID) *CategoryLangUpsert {
	u.Set(categorylang.FieldCategoryID, v)
	return u
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateCategoryID() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldCategoryID)
	return u
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *CategoryLangUpsert) ClearCategoryID() *CategoryLangUpsert {
	u.SetNull(categorylang.FieldCategoryID)
	return u
}

// SetDisplay sets the "display" field.
func (u *CategoryLangUpsert) SetDisplay(v string) *CategoryLangUpsert {
	u.Set(categorylang.FieldDisplay, v)
	return u
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *CategoryLangUpsert) UpdateDisplay() *CategoryLangUpsert {
	u.SetExcluded(categorylang.FieldDisplay)
	return u
}

// ClearDisplay clears the value of the "display" field.
func (u *CategoryLangUpsert) ClearDisplay() *CategoryLangUpsert {
	u.SetNull(categorylang.FieldDisplay)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CategoryLang.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(categorylang.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CategoryLangUpsertOne) UpdateNewValues() *CategoryLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(categorylang.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CategoryLang.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CategoryLangUpsertOne) Ignore() *CategoryLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CategoryLangUpsertOne) DoNothing() *CategoryLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CategoryLangCreate.OnConflict
// documentation for more info.
func (u *CategoryLangUpsertOne) Update(set func(*CategoryLangUpsert)) *CategoryLangUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CategoryLangUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CategoryLangUpsertOne) SetCreatedAt(v uint32) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CategoryLangUpsertOne) AddCreatedAt(v uint32) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateCreatedAt() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CategoryLangUpsertOne) SetUpdatedAt(v uint32) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CategoryLangUpsertOne) AddUpdatedAt(v uint32) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateUpdatedAt() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CategoryLangUpsertOne) SetDeletedAt(v uint32) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CategoryLangUpsertOne) AddDeletedAt(v uint32) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateDeletedAt() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CategoryLangUpsertOne) SetEntID(v uuid.UUID) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateEntID() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CategoryLangUpsertOne) SetAppID(v uuid.UUID) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateAppID() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *CategoryLangUpsertOne) SetLangID(v uuid.UUID) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateLangID() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateLangID()
	})
}

// ClearLangID clears the value of the "lang_id" field.
func (u *CategoryLangUpsertOne) ClearLangID() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.ClearLangID()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *CategoryLangUpsertOne) SetCategoryID(v uuid.UUID) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateCategoryID() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *CategoryLangUpsertOne) ClearCategoryID() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.ClearCategoryID()
	})
}

// SetDisplay sets the "display" field.
func (u *CategoryLangUpsertOne) SetDisplay(v string) *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *CategoryLangUpsertOne) UpdateDisplay() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateDisplay()
	})
}

// ClearDisplay clears the value of the "display" field.
func (u *CategoryLangUpsertOne) ClearDisplay() *CategoryLangUpsertOne {
	return u.Update(func(s *CategoryLangUpsert) {
		s.ClearDisplay()
	})
}

// Exec executes the query.
func (u *CategoryLangUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CategoryLangCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CategoryLangUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CategoryLangUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CategoryLangUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CategoryLangCreateBulk is the builder for creating many CategoryLang entities in bulk.
type CategoryLangCreateBulk struct {
	config
	builders []*CategoryLangCreate
	conflict []sql.ConflictOption
}

// Save creates the CategoryLang entities in the database.
func (clcb *CategoryLangCreateBulk) Save(ctx context.Context) ([]*CategoryLang, error) {
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CategoryLang, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CategoryLangMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = clcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CategoryLangCreateBulk) SaveX(ctx context.Context) []*CategoryLang {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CategoryLangCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CategoryLangCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CategoryLang.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CategoryLangUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (clcb *CategoryLangCreateBulk) OnConflict(opts ...sql.ConflictOption) *CategoryLangUpsertBulk {
	clcb.conflict = opts
	return &CategoryLangUpsertBulk{
		create: clcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CategoryLang.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (clcb *CategoryLangCreateBulk) OnConflictColumns(columns ...string) *CategoryLangUpsertBulk {
	clcb.conflict = append(clcb.conflict, sql.ConflictColumns(columns...))
	return &CategoryLangUpsertBulk{
		create: clcb,
	}
}

// CategoryLangUpsertBulk is the builder for "upsert"-ing
// a bulk of CategoryLang nodes.
type CategoryLangUpsertBulk struct {
	create *CategoryLangCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CategoryLang.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(categorylang.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CategoryLangUpsertBulk) UpdateNewValues() *CategoryLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(categorylang.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CategoryLang.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CategoryLangUpsertBulk) Ignore() *CategoryLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CategoryLangUpsertBulk) DoNothing() *CategoryLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CategoryLangCreateBulk.OnConflict
// documentation for more info.
func (u *CategoryLangUpsertBulk) Update(set func(*CategoryLangUpsert)) *CategoryLangUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CategoryLangUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CategoryLangUpsertBulk) SetCreatedAt(v uint32) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *CategoryLangUpsertBulk) AddCreatedAt(v uint32) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateCreatedAt() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CategoryLangUpsertBulk) SetUpdatedAt(v uint32) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *CategoryLangUpsertBulk) AddUpdatedAt(v uint32) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateUpdatedAt() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CategoryLangUpsertBulk) SetDeletedAt(v uint32) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *CategoryLangUpsertBulk) AddDeletedAt(v uint32) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateDeletedAt() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *CategoryLangUpsertBulk) SetEntID(v uuid.UUID) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateEntID() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *CategoryLangUpsertBulk) SetAppID(v uuid.UUID) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateAppID() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *CategoryLangUpsertBulk) SetLangID(v uuid.UUID) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateLangID() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateLangID()
	})
}

// ClearLangID clears the value of the "lang_id" field.
func (u *CategoryLangUpsertBulk) ClearLangID() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.ClearLangID()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *CategoryLangUpsertBulk) SetCategoryID(v uuid.UUID) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateCategoryID() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *CategoryLangUpsertBulk) ClearCategoryID() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.ClearCategoryID()
	})
}

// SetDisplay sets the "display" field.
func (u *CategoryLangUpsertBulk) SetDisplay(v string) *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *CategoryLangUpsertBulk) UpdateDisplay() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.UpdateDisplay()
	})
}

// ClearDisplay clears the value of the "display" field.
func (u *CategoryLangUpsertBulk) ClearDisplay() *CategoryLangUpsertBulk {
	return u.Update(func(s *CategoryLangUpsert) {
		s.ClearDisplay()
	})
}

// Exec executes the query.
func (u *CategoryLangUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CategoryLangCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CategoryLangCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CategoryLangUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
