// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/article"
	"github.com/google/uuid"
)

// ArticleCreate is the builder for creating a Article entity.
type ArticleCreate struct {
	config
	mutation *ArticleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *ArticleCreate) SetCreatedAt(u uint32) *ArticleCreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableCreatedAt(u *uint32) *ArticleCreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ArticleCreate) SetUpdatedAt(u uint32) *ArticleCreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableUpdatedAt(u *uint32) *ArticleCreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *ArticleCreate) SetDeletedAt(u uint32) *ArticleCreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableDeletedAt(u *uint32) *ArticleCreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetEntID sets the "ent_id" field.
func (ac *ArticleCreate) SetEntID(u uuid.UUID) *ArticleCreate {
	ac.mutation.SetEntID(u)
	return ac
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableEntID(u *uuid.UUID) *ArticleCreate {
	if u != nil {
		ac.SetEntID(*u)
	}
	return ac
}

// SetAppID sets the "app_id" field.
func (ac *ArticleCreate) SetAppID(u uuid.UUID) *ArticleCreate {
	ac.mutation.SetAppID(u)
	return ac
}

// SetCategoryID sets the "category_id" field.
func (ac *ArticleCreate) SetCategoryID(u uuid.UUID) *ArticleCreate {
	ac.mutation.SetCategoryID(u)
	return ac
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableCategoryID(u *uuid.UUID) *ArticleCreate {
	if u != nil {
		ac.SetCategoryID(*u)
	}
	return ac
}

// SetAuthorID sets the "author_id" field.
func (ac *ArticleCreate) SetAuthorID(u uuid.UUID) *ArticleCreate {
	ac.mutation.SetAuthorID(u)
	return ac
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableAuthorID(u *uuid.UUID) *ArticleCreate {
	if u != nil {
		ac.SetAuthorID(*u)
	}
	return ac
}

// SetArticleKey sets the "article_key" field.
func (ac *ArticleCreate) SetArticleKey(u uuid.UUID) *ArticleCreate {
	ac.mutation.SetArticleKey(u)
	return ac
}

// SetNillableArticleKey sets the "article_key" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableArticleKey(u *uuid.UUID) *ArticleCreate {
	if u != nil {
		ac.SetArticleKey(*u)
	}
	return ac
}

// SetTitle sets the "title" field.
func (ac *ArticleCreate) SetTitle(s string) *ArticleCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableTitle(s *string) *ArticleCreate {
	if s != nil {
		ac.SetTitle(*s)
	}
	return ac
}

// SetSubtitle sets the "subtitle" field.
func (ac *ArticleCreate) SetSubtitle(s string) *ArticleCreate {
	ac.mutation.SetSubtitle(s)
	return ac
}

// SetNillableSubtitle sets the "subtitle" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableSubtitle(s *string) *ArticleCreate {
	if s != nil {
		ac.SetSubtitle(*s)
	}
	return ac
}

// SetDigest sets the "digest" field.
func (ac *ArticleCreate) SetDigest(s string) *ArticleCreate {
	ac.mutation.SetDigest(s)
	return ac
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableDigest(s *string) *ArticleCreate {
	if s != nil {
		ac.SetDigest(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *ArticleCreate) SetStatus(s string) *ArticleCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableStatus(s *string) *ArticleCreate {
	if s != nil {
		ac.SetStatus(*s)
	}
	return ac
}

// SetHost sets the "host" field.
func (ac *ArticleCreate) SetHost(s string) *ArticleCreate {
	ac.mutation.SetHost(s)
	return ac
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableHost(s *string) *ArticleCreate {
	if s != nil {
		ac.SetHost(*s)
	}
	return ac
}

// SetVersion sets the "version" field.
func (ac *ArticleCreate) SetVersion(u uint32) *ArticleCreate {
	ac.mutation.SetVersion(u)
	return ac
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableVersion(u *uint32) *ArticleCreate {
	if u != nil {
		ac.SetVersion(*u)
	}
	return ac
}

// SetIso sets the "iso" field.
func (ac *ArticleCreate) SetIso(s string) *ArticleCreate {
	ac.mutation.SetIso(s)
	return ac
}

// SetNillableIso sets the "iso" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableIso(s *string) *ArticleCreate {
	if s != nil {
		ac.SetIso(*s)
	}
	return ac
}

// SetContentURL sets the "content_url" field.
func (ac *ArticleCreate) SetContentURL(s string) *ArticleCreate {
	ac.mutation.SetContentURL(s)
	return ac
}

// SetNillableContentURL sets the "content_url" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableContentURL(s *string) *ArticleCreate {
	if s != nil {
		ac.SetContentURL(*s)
	}
	return ac
}

// SetLatest sets the "latest" field.
func (ac *ArticleCreate) SetLatest(b bool) *ArticleCreate {
	ac.mutation.SetLatest(b)
	return ac
}

// SetNillableLatest sets the "latest" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableLatest(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetLatest(*b)
	}
	return ac
}

// SetPublishedAt sets the "published_at" field.
func (ac *ArticleCreate) SetPublishedAt(u uint32) *ArticleCreate {
	ac.mutation.SetPublishedAt(u)
	return ac
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (ac *ArticleCreate) SetNillablePublishedAt(u *uint32) *ArticleCreate {
	if u != nil {
		ac.SetPublishedAt(*u)
	}
	return ac
}

// SetACLEnabled sets the "acl_enabled" field.
func (ac *ArticleCreate) SetACLEnabled(b bool) *ArticleCreate {
	ac.mutation.SetACLEnabled(b)
	return ac
}

// SetNillableACLEnabled sets the "acl_enabled" field if the given value is not nil.
func (ac *ArticleCreate) SetNillableACLEnabled(b *bool) *ArticleCreate {
	if b != nil {
		ac.SetACLEnabled(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ArticleCreate) SetID(u uint32) *ArticleCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the ArticleMutation object of the builder.
func (ac *ArticleCreate) Mutation() *ArticleMutation {
	return ac.mutation
}

// Save creates the Article in the database.
func (ac *ArticleCreate) Save(ctx context.Context) (*Article, error) {
	var (
		err  error
		node *Article
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArticleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Article)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ArticleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArticleCreate) SaveX(ctx context.Context) *Article {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ArticleCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ArticleCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ArticleCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if article.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized article.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := article.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if article.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized article.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := article.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		if article.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized article.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := article.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.EntID(); !ok {
		if article.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized article.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := article.DefaultEntID()
		ac.mutation.SetEntID(v)
	}
	if _, ok := ac.mutation.CategoryID(); !ok {
		if article.DefaultCategoryID == nil {
			return fmt.Errorf("ent: uninitialized article.DefaultCategoryID (forgotten import ent/runtime?)")
		}
		v := article.DefaultCategoryID()
		ac.mutation.SetCategoryID(v)
	}
	if _, ok := ac.mutation.AuthorID(); !ok {
		if article.DefaultAuthorID == nil {
			return fmt.Errorf("ent: uninitialized article.DefaultAuthorID (forgotten import ent/runtime?)")
		}
		v := article.DefaultAuthorID()
		ac.mutation.SetAuthorID(v)
	}
	if _, ok := ac.mutation.ArticleKey(); !ok {
		if article.DefaultArticleKey == nil {
			return fmt.Errorf("ent: uninitialized article.DefaultArticleKey (forgotten import ent/runtime?)")
		}
		v := article.DefaultArticleKey()
		ac.mutation.SetArticleKey(v)
	}
	if _, ok := ac.mutation.Title(); !ok {
		v := article.DefaultTitle
		ac.mutation.SetTitle(v)
	}
	if _, ok := ac.mutation.Subtitle(); !ok {
		v := article.DefaultSubtitle
		ac.mutation.SetSubtitle(v)
	}
	if _, ok := ac.mutation.Digest(); !ok {
		v := article.DefaultDigest
		ac.mutation.SetDigest(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := article.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.Host(); !ok {
		v := article.DefaultHost
		ac.mutation.SetHost(v)
	}
	if _, ok := ac.mutation.Version(); !ok {
		v := article.DefaultVersion
		ac.mutation.SetVersion(v)
	}
	if _, ok := ac.mutation.Iso(); !ok {
		v := article.DefaultIso
		ac.mutation.SetIso(v)
	}
	if _, ok := ac.mutation.ContentURL(); !ok {
		v := article.DefaultContentURL
		ac.mutation.SetContentURL(v)
	}
	if _, ok := ac.mutation.Latest(); !ok {
		v := article.DefaultLatest
		ac.mutation.SetLatest(v)
	}
	if _, ok := ac.mutation.PublishedAt(); !ok {
		v := article.DefaultPublishedAt
		ac.mutation.SetPublishedAt(v)
	}
	if _, ok := ac.mutation.ACLEnabled(); !ok {
		v := article.DefaultACLEnabled
		ac.mutation.SetACLEnabled(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *ArticleCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Article.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Article.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Article.deleted_at"`)}
	}
	if _, ok := ac.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Article.ent_id"`)}
	}
	if _, ok := ac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Article.app_id"`)}
	}
	return nil
}

func (ac *ArticleCreate) sqlSave(ctx context.Context) (*Article, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (ac *ArticleCreate) createSpec() (*Article, *sqlgraph.CreateSpec) {
	var (
		_node = &Article{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: article.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: article.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := ac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ac.mutation.CategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldCategoryID,
		})
		_node.CategoryID = value
	}
	if value, ok := ac.mutation.AuthorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldAuthorID,
		})
		_node.AuthorID = value
	}
	if value, ok := ac.mutation.ArticleKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: article.FieldArticleKey,
		})
		_node.ArticleKey = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ac.mutation.Subtitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldSubtitle,
		})
		_node.Subtitle = value
	}
	if value, ok := ac.mutation.Digest(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldDigest,
		})
		_node.Digest = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ac.mutation.Host(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldHost,
		})
		_node.Host = value
	}
	if value, ok := ac.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := ac.mutation.Iso(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldIso,
		})
		_node.Iso = value
	}
	if value, ok := ac.mutation.ContentURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: article.FieldContentURL,
		})
		_node.ContentURL = value
	}
	if value, ok := ac.mutation.Latest(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: article.FieldLatest,
		})
		_node.Latest = value
	}
	if value, ok := ac.mutation.PublishedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: article.FieldPublishedAt,
		})
		_node.PublishedAt = value
	}
	if value, ok := ac.mutation.ACLEnabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: article.FieldACLEnabled,
		})
		_node.ACLEnabled = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Article.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArticleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ac *ArticleCreate) OnConflict(opts ...sql.ConflictOption) *ArticleUpsertOne {
	ac.conflict = opts
	return &ArticleUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *ArticleCreate) OnConflictColumns(columns ...string) *ArticleUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ArticleUpsertOne{
		create: ac,
	}
}

type (
	// ArticleUpsertOne is the builder for "upsert"-ing
	//  one Article node.
	ArticleUpsertOne struct {
		create *ArticleCreate
	}

	// ArticleUpsert is the "OnConflict" setter.
	ArticleUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ArticleUpsert) SetCreatedAt(v uint32) *ArticleUpsert {
	u.Set(article.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateCreatedAt() *ArticleUpsert {
	u.SetExcluded(article.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArticleUpsert) AddCreatedAt(v uint32) *ArticleUpsert {
	u.Add(article.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArticleUpsert) SetUpdatedAt(v uint32) *ArticleUpsert {
	u.Set(article.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateUpdatedAt() *ArticleUpsert {
	u.SetExcluded(article.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArticleUpsert) AddUpdatedAt(v uint32) *ArticleUpsert {
	u.Add(article.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArticleUpsert) SetDeletedAt(v uint32) *ArticleUpsert {
	u.Set(article.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateDeletedAt() *ArticleUpsert {
	u.SetExcluded(article.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArticleUpsert) AddDeletedAt(v uint32) *ArticleUpsert {
	u.Add(article.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *ArticleUpsert) SetEntID(v uuid.UUID) *ArticleUpsert {
	u.Set(article.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateEntID() *ArticleUpsert {
	u.SetExcluded(article.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *ArticleUpsert) SetAppID(v uuid.UUID) *ArticleUpsert {
	u.Set(article.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateAppID() *ArticleUpsert {
	u.SetExcluded(article.FieldAppID)
	return u
}

// SetCategoryID sets the "category_id" field.
func (u *ArticleUpsert) SetCategoryID(v uuid.UUID) *ArticleUpsert {
	u.Set(article.FieldCategoryID, v)
	return u
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateCategoryID() *ArticleUpsert {
	u.SetExcluded(article.FieldCategoryID)
	return u
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *ArticleUpsert) ClearCategoryID() *ArticleUpsert {
	u.SetNull(article.FieldCategoryID)
	return u
}

// SetAuthorID sets the "author_id" field.
func (u *ArticleUpsert) SetAuthorID(v uuid.UUID) *ArticleUpsert {
	u.Set(article.FieldAuthorID, v)
	return u
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateAuthorID() *ArticleUpsert {
	u.SetExcluded(article.FieldAuthorID)
	return u
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *ArticleUpsert) ClearAuthorID() *ArticleUpsert {
	u.SetNull(article.FieldAuthorID)
	return u
}

// SetArticleKey sets the "article_key" field.
func (u *ArticleUpsert) SetArticleKey(v uuid.UUID) *ArticleUpsert {
	u.Set(article.FieldArticleKey, v)
	return u
}

// UpdateArticleKey sets the "article_key" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateArticleKey() *ArticleUpsert {
	u.SetExcluded(article.FieldArticleKey)
	return u
}

// ClearArticleKey clears the value of the "article_key" field.
func (u *ArticleUpsert) ClearArticleKey() *ArticleUpsert {
	u.SetNull(article.FieldArticleKey)
	return u
}

// SetTitle sets the "title" field.
func (u *ArticleUpsert) SetTitle(v string) *ArticleUpsert {
	u.Set(article.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateTitle() *ArticleUpsert {
	u.SetExcluded(article.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *ArticleUpsert) ClearTitle() *ArticleUpsert {
	u.SetNull(article.FieldTitle)
	return u
}

// SetSubtitle sets the "subtitle" field.
func (u *ArticleUpsert) SetSubtitle(v string) *ArticleUpsert {
	u.Set(article.FieldSubtitle, v)
	return u
}

// UpdateSubtitle sets the "subtitle" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateSubtitle() *ArticleUpsert {
	u.SetExcluded(article.FieldSubtitle)
	return u
}

// ClearSubtitle clears the value of the "subtitle" field.
func (u *ArticleUpsert) ClearSubtitle() *ArticleUpsert {
	u.SetNull(article.FieldSubtitle)
	return u
}

// SetDigest sets the "digest" field.
func (u *ArticleUpsert) SetDigest(v string) *ArticleUpsert {
	u.Set(article.FieldDigest, v)
	return u
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateDigest() *ArticleUpsert {
	u.SetExcluded(article.FieldDigest)
	return u
}

// ClearDigest clears the value of the "digest" field.
func (u *ArticleUpsert) ClearDigest() *ArticleUpsert {
	u.SetNull(article.FieldDigest)
	return u
}

// SetStatus sets the "status" field.
func (u *ArticleUpsert) SetStatus(v string) *ArticleUpsert {
	u.Set(article.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateStatus() *ArticleUpsert {
	u.SetExcluded(article.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *ArticleUpsert) ClearStatus() *ArticleUpsert {
	u.SetNull(article.FieldStatus)
	return u
}

// SetHost sets the "host" field.
func (u *ArticleUpsert) SetHost(v string) *ArticleUpsert {
	u.Set(article.FieldHost, v)
	return u
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateHost() *ArticleUpsert {
	u.SetExcluded(article.FieldHost)
	return u
}

// ClearHost clears the value of the "host" field.
func (u *ArticleUpsert) ClearHost() *ArticleUpsert {
	u.SetNull(article.FieldHost)
	return u
}

// SetVersion sets the "version" field.
func (u *ArticleUpsert) SetVersion(v uint32) *ArticleUpsert {
	u.Set(article.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateVersion() *ArticleUpsert {
	u.SetExcluded(article.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *ArticleUpsert) AddVersion(v uint32) *ArticleUpsert {
	u.Add(article.FieldVersion, v)
	return u
}

// ClearVersion clears the value of the "version" field.
func (u *ArticleUpsert) ClearVersion() *ArticleUpsert {
	u.SetNull(article.FieldVersion)
	return u
}

// SetIso sets the "iso" field.
func (u *ArticleUpsert) SetIso(v string) *ArticleUpsert {
	u.Set(article.FieldIso, v)
	return u
}

// UpdateIso sets the "iso" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateIso() *ArticleUpsert {
	u.SetExcluded(article.FieldIso)
	return u
}

// ClearIso clears the value of the "iso" field.
func (u *ArticleUpsert) ClearIso() *ArticleUpsert {
	u.SetNull(article.FieldIso)
	return u
}

// SetContentURL sets the "content_url" field.
func (u *ArticleUpsert) SetContentURL(v string) *ArticleUpsert {
	u.Set(article.FieldContentURL, v)
	return u
}

// UpdateContentURL sets the "content_url" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateContentURL() *ArticleUpsert {
	u.SetExcluded(article.FieldContentURL)
	return u
}

// ClearContentURL clears the value of the "content_url" field.
func (u *ArticleUpsert) ClearContentURL() *ArticleUpsert {
	u.SetNull(article.FieldContentURL)
	return u
}

// SetLatest sets the "latest" field.
func (u *ArticleUpsert) SetLatest(v bool) *ArticleUpsert {
	u.Set(article.FieldLatest, v)
	return u
}

// UpdateLatest sets the "latest" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateLatest() *ArticleUpsert {
	u.SetExcluded(article.FieldLatest)
	return u
}

// ClearLatest clears the value of the "latest" field.
func (u *ArticleUpsert) ClearLatest() *ArticleUpsert {
	u.SetNull(article.FieldLatest)
	return u
}

// SetPublishedAt sets the "published_at" field.
func (u *ArticleUpsert) SetPublishedAt(v uint32) *ArticleUpsert {
	u.Set(article.FieldPublishedAt, v)
	return u
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *ArticleUpsert) UpdatePublishedAt() *ArticleUpsert {
	u.SetExcluded(article.FieldPublishedAt)
	return u
}

// AddPublishedAt adds v to the "published_at" field.
func (u *ArticleUpsert) AddPublishedAt(v uint32) *ArticleUpsert {
	u.Add(article.FieldPublishedAt, v)
	return u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *ArticleUpsert) ClearPublishedAt() *ArticleUpsert {
	u.SetNull(article.FieldPublishedAt)
	return u
}

// SetACLEnabled sets the "acl_enabled" field.
func (u *ArticleUpsert) SetACLEnabled(v bool) *ArticleUpsert {
	u.Set(article.FieldACLEnabled, v)
	return u
}

// UpdateACLEnabled sets the "acl_enabled" field to the value that was provided on create.
func (u *ArticleUpsert) UpdateACLEnabled() *ArticleUpsert {
	u.SetExcluded(article.FieldACLEnabled)
	return u
}

// ClearACLEnabled clears the value of the "acl_enabled" field.
func (u *ArticleUpsert) ClearACLEnabled() *ArticleUpsert {
	u.SetNull(article.FieldACLEnabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(article.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ArticleUpsertOne) UpdateNewValues() *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(article.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Article.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ArticleUpsertOne) Ignore() *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArticleUpsertOne) DoNothing() *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArticleCreate.OnConflict
// documentation for more info.
func (u *ArticleUpsertOne) Update(set func(*ArticleUpsert)) *ArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ArticleUpsertOne) SetCreatedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArticleUpsertOne) AddCreatedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateCreatedAt() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArticleUpsertOne) SetUpdatedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArticleUpsertOne) AddUpdatedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateUpdatedAt() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArticleUpsertOne) SetDeletedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArticleUpsertOne) AddDeletedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateDeletedAt() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *ArticleUpsertOne) SetEntID(v uuid.UUID) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateEntID() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *ArticleUpsertOne) SetAppID(v uuid.UUID) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateAppID() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateAppID()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *ArticleUpsertOne) SetCategoryID(v uuid.UUID) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateCategoryID() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *ArticleUpsertOne) ClearCategoryID() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearCategoryID()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *ArticleUpsertOne) SetAuthorID(v uuid.UUID) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateAuthorID() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateAuthorID()
	})
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *ArticleUpsertOne) ClearAuthorID() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearAuthorID()
	})
}

// SetArticleKey sets the "article_key" field.
func (u *ArticleUpsertOne) SetArticleKey(v uuid.UUID) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetArticleKey(v)
	})
}

// UpdateArticleKey sets the "article_key" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateArticleKey() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateArticleKey()
	})
}

// ClearArticleKey clears the value of the "article_key" field.
func (u *ArticleUpsertOne) ClearArticleKey() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearArticleKey()
	})
}

// SetTitle sets the "title" field.
func (u *ArticleUpsertOne) SetTitle(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateTitle() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ArticleUpsertOne) ClearTitle() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearTitle()
	})
}

// SetSubtitle sets the "subtitle" field.
func (u *ArticleUpsertOne) SetSubtitle(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetSubtitle(v)
	})
}

// UpdateSubtitle sets the "subtitle" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateSubtitle() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateSubtitle()
	})
}

// ClearSubtitle clears the value of the "subtitle" field.
func (u *ArticleUpsertOne) ClearSubtitle() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearSubtitle()
	})
}

// SetDigest sets the "digest" field.
func (u *ArticleUpsertOne) SetDigest(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateDigest() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateDigest()
	})
}

// ClearDigest clears the value of the "digest" field.
func (u *ArticleUpsertOne) ClearDigest() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearDigest()
	})
}

// SetStatus sets the "status" field.
func (u *ArticleUpsertOne) SetStatus(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateStatus() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ArticleUpsertOne) ClearStatus() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearStatus()
	})
}

// SetHost sets the "host" field.
func (u *ArticleUpsertOne) SetHost(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateHost() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateHost()
	})
}

// ClearHost clears the value of the "host" field.
func (u *ArticleUpsertOne) ClearHost() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearHost()
	})
}

// SetVersion sets the "version" field.
func (u *ArticleUpsertOne) SetVersion(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ArticleUpsertOne) AddVersion(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateVersion() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *ArticleUpsertOne) ClearVersion() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearVersion()
	})
}

// SetIso sets the "iso" field.
func (u *ArticleUpsertOne) SetIso(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetIso(v)
	})
}

// UpdateIso sets the "iso" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateIso() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateIso()
	})
}

// ClearIso clears the value of the "iso" field.
func (u *ArticleUpsertOne) ClearIso() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearIso()
	})
}

// SetContentURL sets the "content_url" field.
func (u *ArticleUpsertOne) SetContentURL(v string) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetContentURL(v)
	})
}

// UpdateContentURL sets the "content_url" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateContentURL() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateContentURL()
	})
}

// ClearContentURL clears the value of the "content_url" field.
func (u *ArticleUpsertOne) ClearContentURL() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearContentURL()
	})
}

// SetLatest sets the "latest" field.
func (u *ArticleUpsertOne) SetLatest(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetLatest(v)
	})
}

// UpdateLatest sets the "latest" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateLatest() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateLatest()
	})
}

// ClearLatest clears the value of the "latest" field.
func (u *ArticleUpsertOne) ClearLatest() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearLatest()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *ArticleUpsertOne) SetPublishedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetPublishedAt(v)
	})
}

// AddPublishedAt adds v to the "published_at" field.
func (u *ArticleUpsertOne) AddPublishedAt(v uint32) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.AddPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdatePublishedAt() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *ArticleUpsertOne) ClearPublishedAt() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearPublishedAt()
	})
}

// SetACLEnabled sets the "acl_enabled" field.
func (u *ArticleUpsertOne) SetACLEnabled(v bool) *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.SetACLEnabled(v)
	})
}

// UpdateACLEnabled sets the "acl_enabled" field to the value that was provided on create.
func (u *ArticleUpsertOne) UpdateACLEnabled() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateACLEnabled()
	})
}

// ClearACLEnabled clears the value of the "acl_enabled" field.
func (u *ArticleUpsertOne) ClearACLEnabled() *ArticleUpsertOne {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearACLEnabled()
	})
}

// Exec executes the query.
func (u *ArticleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArticleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArticleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ArticleUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ArticleUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ArticleCreateBulk is the builder for creating many Article entities in bulk.
type ArticleCreateBulk struct {
	config
	builders []*ArticleCreate
	conflict []sql.ConflictOption
}

// Save creates the Article entities in the database.
func (acb *ArticleCreateBulk) Save(ctx context.Context) ([]*Article, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Article, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ArticleCreateBulk) SaveX(ctx context.Context) []*Article {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ArticleCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Article.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ArticleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acb *ArticleCreateBulk) OnConflict(opts ...sql.ConflictOption) *ArticleUpsertBulk {
	acb.conflict = opts
	return &ArticleUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *ArticleCreateBulk) OnConflictColumns(columns ...string) *ArticleUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ArticleUpsertBulk{
		create: acb,
	}
}

// ArticleUpsertBulk is the builder for "upsert"-ing
// a bulk of Article nodes.
type ArticleUpsertBulk struct {
	create *ArticleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(article.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ArticleUpsertBulk) UpdateNewValues() *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(article.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Article.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ArticleUpsertBulk) Ignore() *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ArticleUpsertBulk) DoNothing() *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ArticleCreateBulk.OnConflict
// documentation for more info.
func (u *ArticleUpsertBulk) Update(set func(*ArticleUpsert)) *ArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ArticleUpsertBulk) SetCreatedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *ArticleUpsertBulk) AddCreatedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateCreatedAt() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ArticleUpsertBulk) SetUpdatedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *ArticleUpsertBulk) AddUpdatedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateUpdatedAt() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ArticleUpsertBulk) SetDeletedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *ArticleUpsertBulk) AddDeletedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateDeletedAt() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *ArticleUpsertBulk) SetEntID(v uuid.UUID) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateEntID() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *ArticleUpsertBulk) SetAppID(v uuid.UUID) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateAppID() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateAppID()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *ArticleUpsertBulk) SetCategoryID(v uuid.UUID) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateCategoryID() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *ArticleUpsertBulk) ClearCategoryID() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearCategoryID()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *ArticleUpsertBulk) SetAuthorID(v uuid.UUID) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateAuthorID() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateAuthorID()
	})
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *ArticleUpsertBulk) ClearAuthorID() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearAuthorID()
	})
}

// SetArticleKey sets the "article_key" field.
func (u *ArticleUpsertBulk) SetArticleKey(v uuid.UUID) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetArticleKey(v)
	})
}

// UpdateArticleKey sets the "article_key" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateArticleKey() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateArticleKey()
	})
}

// ClearArticleKey clears the value of the "article_key" field.
func (u *ArticleUpsertBulk) ClearArticleKey() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearArticleKey()
	})
}

// SetTitle sets the "title" field.
func (u *ArticleUpsertBulk) SetTitle(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateTitle() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ArticleUpsertBulk) ClearTitle() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearTitle()
	})
}

// SetSubtitle sets the "subtitle" field.
func (u *ArticleUpsertBulk) SetSubtitle(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetSubtitle(v)
	})
}

// UpdateSubtitle sets the "subtitle" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateSubtitle() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateSubtitle()
	})
}

// ClearSubtitle clears the value of the "subtitle" field.
func (u *ArticleUpsertBulk) ClearSubtitle() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearSubtitle()
	})
}

// SetDigest sets the "digest" field.
func (u *ArticleUpsertBulk) SetDigest(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateDigest() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateDigest()
	})
}

// ClearDigest clears the value of the "digest" field.
func (u *ArticleUpsertBulk) ClearDigest() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearDigest()
	})
}

// SetStatus sets the "status" field.
func (u *ArticleUpsertBulk) SetStatus(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateStatus() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *ArticleUpsertBulk) ClearStatus() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearStatus()
	})
}

// SetHost sets the "host" field.
func (u *ArticleUpsertBulk) SetHost(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateHost() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateHost()
	})
}

// ClearHost clears the value of the "host" field.
func (u *ArticleUpsertBulk) ClearHost() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearHost()
	})
}

// SetVersion sets the "version" field.
func (u *ArticleUpsertBulk) SetVersion(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ArticleUpsertBulk) AddVersion(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateVersion() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *ArticleUpsertBulk) ClearVersion() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearVersion()
	})
}

// SetIso sets the "iso" field.
func (u *ArticleUpsertBulk) SetIso(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetIso(v)
	})
}

// UpdateIso sets the "iso" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateIso() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateIso()
	})
}

// ClearIso clears the value of the "iso" field.
func (u *ArticleUpsertBulk) ClearIso() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearIso()
	})
}

// SetContentURL sets the "content_url" field.
func (u *ArticleUpsertBulk) SetContentURL(v string) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetContentURL(v)
	})
}

// UpdateContentURL sets the "content_url" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateContentURL() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateContentURL()
	})
}

// ClearContentURL clears the value of the "content_url" field.
func (u *ArticleUpsertBulk) ClearContentURL() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearContentURL()
	})
}

// SetLatest sets the "latest" field.
func (u *ArticleUpsertBulk) SetLatest(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetLatest(v)
	})
}

// UpdateLatest sets the "latest" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateLatest() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateLatest()
	})
}

// ClearLatest clears the value of the "latest" field.
func (u *ArticleUpsertBulk) ClearLatest() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearLatest()
	})
}

// SetPublishedAt sets the "published_at" field.
func (u *ArticleUpsertBulk) SetPublishedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetPublishedAt(v)
	})
}

// AddPublishedAt adds v to the "published_at" field.
func (u *ArticleUpsertBulk) AddPublishedAt(v uint32) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.AddPublishedAt(v)
	})
}

// UpdatePublishedAt sets the "published_at" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdatePublishedAt() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdatePublishedAt()
	})
}

// ClearPublishedAt clears the value of the "published_at" field.
func (u *ArticleUpsertBulk) ClearPublishedAt() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearPublishedAt()
	})
}

// SetACLEnabled sets the "acl_enabled" field.
func (u *ArticleUpsertBulk) SetACLEnabled(v bool) *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.SetACLEnabled(v)
	})
}

// UpdateACLEnabled sets the "acl_enabled" field to the value that was provided on create.
func (u *ArticleUpsertBulk) UpdateACLEnabled() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.UpdateACLEnabled()
	})
}

// ClearACLEnabled clears the value of the "acl_enabled" field.
func (u *ArticleUpsertBulk) ClearACLEnabled() *ArticleUpsertBulk {
	return u.Update(func(s *ArticleUpsert) {
		s.ClearACLEnabled()
	})
}

// Exec executes the query.
func (u *ArticleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ArticleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ArticleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ArticleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
