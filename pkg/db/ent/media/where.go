// Code generated by ent, DO NOT EDIT.

package media

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cms-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Ext applies equality check predicate on the "ext" field. It's identical to ExtEQ.
func Ext(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExt), v))
	})
}

// MediaURL applies equality check predicate on the "media_url" field. It's identical to MediaURLEQ.
func MediaURL(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaURL), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...uuid.UUID) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...uuid.UUID) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ExtEQ applies the EQ predicate on the "ext" field.
func ExtEQ(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExt), v))
	})
}

// ExtNEQ applies the NEQ predicate on the "ext" field.
func ExtNEQ(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExt), v))
	})
}

// ExtIn applies the In predicate on the "ext" field.
func ExtIn(vs ...string) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExt), v...))
	})
}

// ExtNotIn applies the NotIn predicate on the "ext" field.
func ExtNotIn(vs ...string) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExt), v...))
	})
}

// ExtGT applies the GT predicate on the "ext" field.
func ExtGT(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExt), v))
	})
}

// ExtGTE applies the GTE predicate on the "ext" field.
func ExtGTE(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExt), v))
	})
}

// ExtLT applies the LT predicate on the "ext" field.
func ExtLT(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExt), v))
	})
}

// ExtLTE applies the LTE predicate on the "ext" field.
func ExtLTE(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExt), v))
	})
}

// ExtContains applies the Contains predicate on the "ext" field.
func ExtContains(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExt), v))
	})
}

// ExtHasPrefix applies the HasPrefix predicate on the "ext" field.
func ExtHasPrefix(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExt), v))
	})
}

// ExtHasSuffix applies the HasSuffix predicate on the "ext" field.
func ExtHasSuffix(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExt), v))
	})
}

// ExtIsNil applies the IsNil predicate on the "ext" field.
func ExtIsNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExt)))
	})
}

// ExtNotNil applies the NotNil predicate on the "ext" field.
func ExtNotNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExt)))
	})
}

// ExtEqualFold applies the EqualFold predicate on the "ext" field.
func ExtEqualFold(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExt), v))
	})
}

// ExtContainsFold applies the ContainsFold predicate on the "ext" field.
func ExtContainsFold(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExt), v))
	})
}

// MediaURLEQ applies the EQ predicate on the "media_url" field.
func MediaURLEQ(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMediaURL), v))
	})
}

// MediaURLNEQ applies the NEQ predicate on the "media_url" field.
func MediaURLNEQ(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMediaURL), v))
	})
}

// MediaURLIn applies the In predicate on the "media_url" field.
func MediaURLIn(vs ...string) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMediaURL), v...))
	})
}

// MediaURLNotIn applies the NotIn predicate on the "media_url" field.
func MediaURLNotIn(vs ...string) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMediaURL), v...))
	})
}

// MediaURLGT applies the GT predicate on the "media_url" field.
func MediaURLGT(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMediaURL), v))
	})
}

// MediaURLGTE applies the GTE predicate on the "media_url" field.
func MediaURLGTE(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMediaURL), v))
	})
}

// MediaURLLT applies the LT predicate on the "media_url" field.
func MediaURLLT(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMediaURL), v))
	})
}

// MediaURLLTE applies the LTE predicate on the "media_url" field.
func MediaURLLTE(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMediaURL), v))
	})
}

// MediaURLContains applies the Contains predicate on the "media_url" field.
func MediaURLContains(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMediaURL), v))
	})
}

// MediaURLHasPrefix applies the HasPrefix predicate on the "media_url" field.
func MediaURLHasPrefix(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMediaURL), v))
	})
}

// MediaURLHasSuffix applies the HasSuffix predicate on the "media_url" field.
func MediaURLHasSuffix(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMediaURL), v))
	})
}

// MediaURLIsNil applies the IsNil predicate on the "media_url" field.
func MediaURLIsNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMediaURL)))
	})
}

// MediaURLNotNil applies the NotNil predicate on the "media_url" field.
func MediaURLNotNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMediaURL)))
	})
}

// MediaURLEqualFold applies the EqualFold predicate on the "media_url" field.
func MediaURLEqualFold(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMediaURL), v))
	})
}

// MediaURLContainsFold applies the ContainsFold predicate on the "media_url" field.
func MediaURLContainsFold(v string) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMediaURL), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.Media {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Media) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Media) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Media) predicate.Media {
	return predicate.Media(func(s *sql.Selector) {
		p(s.Not())
	})
}
